#!/bin/bash

# Enable debugging: Uncomment for verbose logging. Remember to comment out for daily use.
# set -x

# --- Configuration ---
LOG_FILE="/tmp/pomodoro_status_script.log"
FINISHED_SOUND_PATH="/home/aditya/.config/waybar/sounds/finished_sound.mp3"
START_WORK_SOUND_PATH="/home/aditya/.config/waybar/sounds/start_sound.mp3"
WORK_DURATION_MINUTES=25
BREAK_DURATION_MINUTES=5
POMODORO_CLI_COMMAND="pomodoro-cli"
ZENITY_WINDOW_TITLE="Pomodoro Alert"
ZENITY_ICON_PATH="/usr/share/icons/Adwaita/scalable/actions/alarm-symbolic.svg" # Ensure this path is correct
TIMER_TYPE_FILE="/tmp/.pomo_timer_type"
LAST_MESSAGE_FILE="/tmp/.pomo_last_message"

# Ensure mpv is killed on exit to prevent sounds from lingering
trap 'pkill mpv 2>/dev/null || true' EXIT

# --- Logging Function ---
log() {
    echo "$(date): $@" >> "${LOG_FILE}"
}

# --- Helper Functions ---

# get_current_timer_type: Reads the last known timer type from a file.
get_current_timer_type() {
    if [ -f "${TIMER_TYPE_FILE}" ]; then
        cat "${TIMER_TYPE_FILE}"
    else
        echo "idle" # Default to idle if file doesn't exist
    fi
}

# set_current_timer_type: Writes the current timer type to a file.
set_current_timer_type() {
    local type=$1
    echo "${type}" > "${TIMER_TYPE_FILE}"
}

# send_waybar_output: Formats and prints JSON for Waybar.
send_waybar_output() {
    local text=$1
    local tooltip=$2
    local class=$3
    local percentage=$4
    jq -n -c \
        --arg text_arg "${text}" \
        --arg tooltip_arg "${tooltip}" \
        --arg class_arg "${class}" \
        --argjson percentage_arg "${percentage}" \
        '{text: $text_arg, tooltip: $tooltip_arg, class: $class_arg, percentage: $percentage_arg}'
}

# play_sound: Plays an audio file using mpv.
play_sound() {
    local sound_path=$1
    if [ -f "${sound_path}" ]; then
        mpv --no-video --audio-display=no "${sound_path}" >/dev/null 2>&1 &
        log "Played sound: ${sound_path}"
    else
        log "WARNING: Sound file not found: ${sound_path}"
    fi
}

# send_notification: Sends a desktop notification using notify-send.
send_notification() {
    local title=$1
    local message=$2
    local icon=${3:-"${ZENITY_ICON_PATH}"} # Default icon if not provided
    notify-send -a "${ZENITY_WINDOW_TITLE}" -i "${icon}" "${title}" "${message}"
    log "Sent notification: Title='${title}', Message='${message}'"
}

# --- Main Logic ---

# Stop any previously playing sounds
pkill mpv 2>/dev/null || true

# Get pomodoro-cli status
pomodoro_output=$("${POMODORO_CLI_COMMAND}" status --format json --time-format digital 2>/tmp/pomodoro_cli_stderr.log)
CLI_STATUS=$?

log "pomodoro-cli output: \"${pomodoro_output}\" (exit status: ${CLI_STATUS})"

# Initialize variables for Waybar output
local timer_text=""
local timer_tooltip=""
local timer_class=""
local timer_percentage=0
local new_type=""

if [ ${CLI_STATUS} -ne 0 ] || [ -z "${pomodoro_output}" ]; then
    # pomodoro-cli command failed or returned empty output
    local error_message=$(cat /tmp/pomodoro_cli_stderr.log 2>/dev/null)
    if [ -n "${error_message}" ]; then
        log "ERROR: pomodoro-cli stderr: ${error_message}"
    fi

    timer_text=" 00:00" # Circle icon for idle/stopped
    timer_tooltip="Pomodoro: Not Running\nError: CLI status ${CLI_STATUS}"
    timer_class="idle"
    timer_percentage=0
    new_type="idle" # Explicitly set new_type to idle
else
    # Parse JSON output
    if ! echo "${pomodoro_output}" | jq -e . >/dev/null 2>&1; then
        log "ERROR: Invalid JSON from pomodoro-cli: ${pomodoro_output}"
        timer_text="Error"
        timer_tooltip="Invalid JSON from pomodoro-cli"
        timer_class="error"
        timer_percentage=0
        new_type="error" # Set new_type to error
    else
        # Extract data from JSON
        timer_text=$(echo "${pomodoro_output}" | jq -r .text)
        timer_tooltip=$(echo "${pomodoro_output}" | jq -r .tooltip)
        timer_class=$(echo "${pomodoro_output}" | jq -r .class)
        timer_percentage=$(echo "${pomodoro_output}" | jq -r .percentage)

        # Determine new_type based on timer_class and tooltip for icons
        case "${timer_class}" in
            "running")
                if echo "${timer_tooltip}" | grep -q "Work"; then
                    new_type="work"
                    timer_text="🍅 ${timer_text}" # Add tomato icon
                elif echo "${timer_tooltip}" | grep -q "Break"; then
                    new_type="break"
                    timer_text="☕ ${timer_text}" # Add coffee icon
                else
                    # Fallback if 'running' state is ambiguous (shouldn't happen with current pomodoro-cli)
                    new_type="work" # Default to work if running state is ambiguous
                    timer_text="🍅 ${timer_text}"
                    log "WARNING: 'running' state without 'Work' or 'Break' in tooltip. Defaulting to 'work'."
                fi
                ;;
            "idle")
                new_type="idle"
                timer_text=" ${timer_text}" # Add circle icon
                ;;
            "finished")
                new_type="finished"
                timer_text="✅ ${timer_text}" # Add checkmark icon
                ;;
            *)
                new_type="unknown"
                timer_text="❓ ${timer_text}" # Unknown icon for unexpected states
                log "WARNING: Unhandled timer_class: ${timer_class}. Setting type to 'unknown'."
                ;;
        esac
    fi
fi

current_type=$(get_current_timer_type)
log "Parsed: text='${timer_text}', tooltip='${timer_tooltip}', class='${timer_class}', percentage='${timer_percentage}'"
log "Current type: '${current_type}', New type: '${new_type}'"

# --- Handle State Transitions & Notifications ---
if [ "${new_type}" != "${current_type}" ]; then
    log "State change detected: ${current_type} -> ${new_type}"

    # Play sounds and send notifications based on the new state
    case "${new_type}" in
        "work")
            play_sound "${START_WORK_SOUND_PATH}"
            send_notification "Pomodoro Started" "Time to focus for ${WORK_DURATION_MINUTES} minutes."
            ;;
        "break")
            play_sound "${FINISHED_SOUND_PATH}"
            send_notification "Pomodoro Break!" "Time for a ${BREAK_DURATION_MINUTES} minute break."
            ;;
        "idle")
            # This could happen after a stop, or if no timer is running initially
            # Only play finished sound and notify if it was an active timer that stopped/finished
            if [ "${current_type}" == "break" ] || [ "${current_type}" == "work" ] || [ "${current_type}" == "finished" ]; then
                play_sound "${FINISHED_SOUND_PATH}"
                send_notification "Pomodoro Stopped" "The timer has been stopped."
            fi
            ;;
        "finished")
            # The 'finished' state is distinct, handled by pomodoro-cli's own notifications.
            # However, if pomodoro-cli doesn't send a notification, this can act as a fallback.
            # We'll play a sound here as a clear indicator.
            play_sound "${FINISHED_SOUND_PATH}"
            if [ "${current_type}" == "work" ]; then
                send_notification "Work Finished!" "Take a break."
            elif [ "${current_type}" == "break" ]; then
                send_notification "Break Finished!" "Time to start a new work session."
            fi
            ;;
        "error" | "unknown")
            send_notification "Pomodoro Script Error" "An issue occurred. Check logs at ${LOG_FILE}" "${ZENITY_ICON_PATH}"
            ;;
    esac
    set_current_timer_type "${new_type}" # Update the stored type only after handling transition
fi

# --- Final Output for Waybar ---
send_waybar_output "${timer_text}" "${timer_tooltip}" "${timer_class}" "${timer_percentage}"
