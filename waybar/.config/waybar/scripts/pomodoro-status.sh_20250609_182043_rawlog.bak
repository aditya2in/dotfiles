#!/bin/bash

# Define absolute paths for commands
# These paths were identified from your 'which' command outputs
POMODORO_CLI="/home/aditya/.cargo/bin/pomodoro-cli"
JQ_PATH="/usr/bin/jq"

# --- DEBUGGING START ---
# Log the PATH seen by the script when Waybar executes it
echo "DEBUG: PATH = $PATH" > /tmp/waybar_pomo_debug.log 2>&1
# Log any stderr from pomodoro-cli or jq to the same file
# This helps capture "command not found" errors or other execution failures
exec 2>> /tmp/waybar_pomo_debug.log
# --- DEBUGGING END ---


# Get pomodoro-cli status in JSON format
# Use the absolute path for pomodoro-cli
# Removed 2>/dev/null here to capture any stderr from pomodoro-cli in the debug log
pomodoro_json=$("$POMODORO_CLI" status --format json --time-format digital)

# Check if pomodoro_json is empty or invalid (e.g., if pomodoro-cli isn't running or failed)
# Use the absolute path for jq here for validation
if [ -z "$pomodoro_json" ] || ! echo "$pomodoro_json" | "$JQ_PATH" . > /dev/null 2>&1; then
    # Output an empty JSON object or a default state for Waybar
    # This ensures Waybar always receives valid JSON, even if the primary command fails
    printf '{"text": "", "tooltip": "Pomodoro not running", "class": "paused", "percentage": 0}\n'
    exit 0
fi

# Parse the JSON and extract relevant fields
# Use the absolute path for jq for all parsing operations
text=$(echo "$pomodoro_json" | "$JQ_PATH" -r '.text // "00:00"')
tooltip_raw=$(echo "$pomodoro_json" | "$JQ_PATH" -r '.tooltip // "No info"')
class=$(echo "$pomodoro_json" | "$JQ_PATH" -r '.class // "paused"')
percentage=$(echo "$pomodoro_json" | "$JQ_PATH" -r '.percentage // 0')

# Customize text and tooltip for Waybar based on class
if [[ "$class" == "running" ]]; then
    text="üçÖ $text"
    class="work" # Change to 'work' class for better styling distinction in Waybar
elif [[ "$class" == "paused" ]]; then
    text="‚è∏Ô∏è $text"
elif [[ "$class" == "break" ]]; then
    text="‚òï $text"
elif [[ "$class" == "long-break" ]]; then
    text="üèñÔ∏è $text"
fi

# Reformat tooltip to handle newlines (printf "%b" interprets backslash escapes like \n)
tooltip=$(printf "%b" "$tooltip_raw")

# Construct the final JSON output for Waybar
# IMPORTANT: Use printf "%s" and pipe through iconv -c for maximum cleanliness
# Use the absolute path for jq for the final JSON construction and pretty-printing
printf "%s" "$(
    "$JQ_PATH" -n \
        --arg text "$text" \
        --arg tooltip "$tooltip" \
        --arg class "$class" \
        --argjson percentage "$percentage" \
        '{text: $text, tooltip: $tooltip, class: $class, percentage: $percentage}'
)" | iconv -f UTF-8 -t UTF-8 -c | "$JQ_PATH" .
